#@app.route('/api/v1/reservations',defaults={'date': ''})
#@app.route('/api/v1/reservations/<date>')
#@app.route('/api/v1/aerodromestatus')
#@app.route('/api/v1/firebaseauth/ip')
#@app.route('/api/v1/firebaseauth/ip-test')
#@app.route('/api/v1/firebaseauth/mfgt')
#@app.route('/api/v1/firebaseauth/mfgt-test')
#@app.route('/')

swagger: '2.0'
info:
  title: AD API
  description: Aerodrome AD API
  version: "0.0.2"
# the domain of the service
host: localhost:10010
# array of all schemes that your API supports
schemes:
  - http
# will be prefixed to all paths
basePath: /api/v1
produces:
  - application/json
paths:
  /reservations:
    x-swagger-router-controller: flightnet
    get:
      operationId: getReservationsToday
      summary: Download todays reservations
      responses:
        200:
          description: An array of reservations
          schema:
            type: array
            items:
              $ref: '#/definitions/Reservation'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /reservations/{date}:
    x-swagger-router-controller: flightnet
    get:
      operationId: getReservationsByDate
      summary: Download reservations
      parameters:
        - name: date
          in: path
          type: string
          #format: date
          required: true
      responses:
        200:
          description: An array of reservations
          schema:
            type: array
            items:
              $ref: '#/definitions/Reservation'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /aerodromestatus:
    x-swagger-router-controller: aerodrome
    get:
      operationId: status
      summary: Statos of the aerodrome
      responses:
        200:
          description: The aerodrome status
          schema:
            $ref: '#/definitions/ADStatus'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error' 
  /firebaseauth/flightnet/{authsetting}:
    x-swagger-router-controller: firebase
    post:
      operationId: firebaseauth
      summary: Authenticate Firebase/dev with Flightnet Login
      consumes:
        - application/json
      parameters:
        - name: authsetting
          description: Name of authentication setting (e.g. mfgt/mfgt-test)
          in: path
          type: string
          required: true
        - name: authn
          in: body
          schema:
            $ref: '#/definitions/AuthNRequest'
          required: true
      responses:
        200:
          description: Firebase Auth Token
          schema:
            $ref: '#/definitions/FirebaseAuth'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
definitions:
  FirebaseAuth:
    type: object
    properties:
      uid:
        type: string
      ip:
        type: string
  Reservation:
    type: object
    properties:
      PilotStart:
        type: string
      PilotEnd:
        type: string
      ReservationStart:
        type: string
      PilotUsername:
        type: string
      LastChangeDateTime:
        type: string
      ReservationCode:
        type: string
      Origin:
        type: string
      TypeOfFlight:
        type: string
      IsMaintenance:
        type: string
      ReservationStatus:
        type: string
      Destination:
        type: string
      InstructorEnd:
        type: string
      ReservationEnd:
        type: string
      LastChangeUsername:
        type: string
      InstructorUsername:
        type: string
      InstructorStart:
        type: string
      AircraftType:
        type: string
      Registration:
        type: string
      Instructor:
        type: string
      Pilot:
        type: string
  ADStatus:
    type: object
    properties:
      status:
        type: string
        enum: ['open','restricted','closed']
      last_update_date:
        type: string
      last_update_by:
        type: string
      blank:
        type: boolean
      message:
        type: string
      webcam:
        type: object
        properties:
          cams:
            type: object
            properties:
              east:
                $ref: '#/definitions/Camera'
              west:
                $ref: '#/definitions/Camera'    
  Camera:
    type: object
    properties:
      low:
        type: string
      high:
        type: string
  AuthNRequest:
    type: object
    required:
      - username
      - password
    properties:
      username:
        type: string
      password:
        type: string
  Error:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      fields:
        type: string

